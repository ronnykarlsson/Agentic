@page "/settings"
@using Captain.Web.Client.Services
@using Captain.Web.Client.Models
@using Agentic.Profiles
@rendermode InteractiveWebAssembly
@inject SettingsService SettingsService

<PageTitle>Settings</PageTitle>

<h3>Settings</h3>

<p>Configure AI Chatbot Clients below.</p>

@if (uiClients == null)
{
    <p><em>Loading settings...</em></p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="AddClient">Add Client</button>

    @if (uiClients.Count == 0)
    {
        <p>No clients configured yet. Add one to get started.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Client Name</th>
                    <th>Client Type</th>
                    <th>Model</th>
                    <th>Tokens</th>
                    <th>API Key</th>
                    <th>URL</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var uiClient in uiClients)
                {
                    <tr>
                        <td>
                            <input type="text" class="form-control" @bind="@uiClient.ClientDisplayName" placeholder="Client Name" />
                        </td>
                        <td>
                            <select class="form-control" @bind="uiClient.ClientSettings.Name">
                                <option value="OpenAI">OpenAI</option>
                                <option value="Ollama">Ollama</option>
                            </select>
                        </td>
                        <td>
                            <input type="text" class="form-control" @bind="uiClient.ClientSettings.Model" placeholder="Model" />
                        </td>
                        <td>
                            <input type="number" class="form-control" @bind="uiClient.ClientSettings.Tokens" placeholder="Tokens" />
                        </td>
                        <td>
                            <input type="text" class="form-control" @bind="uiClient.ClientSettings.ApiKey" placeholder="API Key (optional)" />
                        </td>
                        <td>
                            <input type="text" class="form-control" @bind="uiClient.ClientSettings.Url" placeholder="URL (optional)" />
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => RemoveClient(uiClient))">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <button class="btn btn-primary mt-3" @onclick="SaveSettings" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
        }
        Save Clients
    </button>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (showSuccessMessage)
{
    <div class="alert alert-success">Settings saved successfully!</div>
}

@code {
    private List<UIClientSettings>? uiClients;
    private string errorMessage = "";
    private bool isLoading = false;
    private bool showSuccessMessage = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        isLoading = true;
        errorMessage = "";
        uiClients = await SettingsService.LoadSettingsAsync();
        isLoading = false;
        StateHasChanged();
    }

    private async Task SaveSettings()
    {
        isLoading = true;
        showSuccessMessage = false;
        errorMessage = "";
        StateHasChanged();

        try
        {
            await SettingsService.SaveSettingsAsync(uiClients);
            showSuccessMessage = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving settings: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private void AddClient()
    {
        if (uiClients != null)
        {
            var newClient = new UIClientSettings
            {
                ClientSettings = new ClientSettings { Name = "OpenAI" }
            };
            uiClients.Add(newClient);
        }
    }

    private void RemoveClient(UIClientSettings uiClientToRemove)
    {
        if (uiClients != null)
        {
            uiClients.Remove(uiClientToRemove);
        }
    }
}